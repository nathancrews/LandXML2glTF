#pragma once

static const char* s_vertexShader = "#version 330\n"
"uniform mat4 modelViewProjection;\n"
"uniform int DrawMode;\n"
"uniform float MaxZ;\n"
"uniform float MinZ;\n"
"uniform float BandSize;\n"
"uniform float ContourStep;\n"
"uniform vec3 CloudColor;\n"
"\n"
"varying vec4 FragColor;\n"
"\n"
"vec4 GetColorByBand(float zVal, float bandSize)\n"
"{\n"
"    if (bandSize == 0.0)\n"
"        bandSize = 1.0;\n"
"\n"
"    float remainder = mod(zVal, bandSize * 3.0);\n"
"    if (remainder < bandSize)\n"
"        return vec4(1.0, 0.0, 0.0, 1.0);\n"
"    else if (remainder < bandSize * 2.0)\n"
"        return vec4(0.0, 1.0, 0.0, 1.0);\n"
"    else\n"
"        return vec4(0.0, 0.0, 1.0, 1.0);\n"
"}\n"
"\n"
"vec4 GetColorByElevation(float elevation, float lowVal, float highVal, bool isGrayscale)\n"
"{\n"
"    vec4 retval = vec4(0.0, 0.0, 0.0, 1.0);\n"
"\n"
"    if (elevation > highVal)\n"
"        elevation = highVal;\n"
"    else if (elevation < lowVal)\n"
"        elevation = lowVal;\n"
"\n"
"    // Sanity check - don't divide by 0\n"
"    if (abs(highVal - lowVal) > 0.00001)\n"
"    {\n"
"        // Normalize the elevation between 0 and 1.0f\n"
"        float normalizedElevation = 1.0f - (highVal - elevation) / (highVal - lowVal);\n"
"\n"
"        if (!isGrayscale)\n"
"        {\n"
"            if (normalizedElevation <= 0.5)\n"
"            {\n"
"                // Interpolate between 0f, 0f, 1f and 0f, 1f, 0f\n"
"                float red = 0.0;\n"
"                float green = normalizedElevation / 0.5;\n"
"                float blue = 1.0 - green;\n"
"\n"
"                retval = vec4(red, green, blue, 1.0);\n"
"            }\n"
"            else\n"
"            {\n"
"                // Interpolate between 0f, 1f, 0f and 1f, 0f, 0f\n"
"                float red = (normalizedElevation - 0.5) / 0.5;\n"
"                float green = 1.0 - red;\n"
"                float blue = 0.0;\n"
"\n"
"                retval = vec4(red, green, blue, 1.0);\n"
"            }\n"
"        }\n"
"        else\n"
"            retval = vec4(normalizedElevation * 0.6, normalizedElevation * 0.6, normalizedElevation * 0.6, 1.0);\n"
"    }\n"
"\n"
"    return retval;\n"
"}\n"
"\n"
"void main()\n"
"{\n"
"    if (DrawMode == 0)\n"
"    {\n"
"        // PCL Stores colors as BGRA\n"
"        FragColor = gl_Color.bgra;\n"
"    }\n"
"    else if (DrawMode == 1)\n"
"    {\n"
"        // By elevation\n"
"        FragColor = GetColorByElevation(gl_Vertex.z, MinZ, MaxZ, false);\n"
"    }\n"
"    else if (DrawMode == 2)\n"
"    {\n"
"        // Elevation bands\n"
"        FragColor = GetColorByBand(gl_Vertex.z, BandSize);\n"
"    }\n"
"    else if (DrawMode == 3)\n"
"    {\n"
"        // By elevation with contours\n"
"        float step = ContourStep;\n"
"        if (step < 0.00001)\n"
"            step = 1.0;\n"
"\n"
"        if (mod(gl_Vertex.z, step) < 0.5)\n"
"        {\n"
"            FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n"
"        }\n"
"        else\n"
"        {\n"
"            FragColor = GetColorByElevation(gl_Vertex.z, MinZ, MaxZ, false);\n"
"        }\n"
"    }\n"
"    else if (DrawMode == 4)\n"
"    {\n"
"        // By elevation grayscale\n"
"        FragColor = GetColorByElevation(gl_Vertex.z, MinZ, MaxZ, true);\n"
"    }\n"
"    else if (DrawMode == 5)\n"
"    {\n"
"        FragColor.rgb = CloudColor.xyz;\n"
"    }\n"
"    else if (DrawMode == 6)\n"
"    {\n"
"        //highlighted color. Shifts color towards yellow\n"
"        FragColor = gl_Color.bgra;"
"        FragColor.r  += 0.25;"
"        FragColor.g += 0.25;"
"        //FragColor = vec4(1.0, 1.0, 0.0, 1.0);\n"
"    }\n"
"    else\n"
"        FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n"
"\n"
"    gl_Position = ftransform();\n"
"}";

static const char* s_pixelShader = "#version 330\n"
"\n"
"varying vec4 FragColor;\n"
"\n"
"void main()\n"
"{\n"
"    gl_FragColor = FragColor;\n"
"}\n";
